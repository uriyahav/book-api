Coding Assignment: Book Management API

Objective
	Build a simple Book Management REST API using Java, Spring Boot, and Hibernate (JPA). This
	task will help evaluate your knowledge of backend architecture, data persistence, and clean coding
	practices.

Requirements
	Implement a RESTful web service with the following entity and endpoints.

Entity: Book
	- id: Long (auto-generated)
	- title: String (not null, not blank)
	- author: String (not null, not blank)
	- publishedYear: Integer (between 1500 and current year)

Endpoints
	- GET /books: Get all books
	- GET /books/{id}: Get book by ID
	- POST /books: Create a new book
	- PUT /books/{id}: Update an existing book
	- DELETE /books/{id}: Delete book by ID

Use meaningful HTTP status codes and include validation error messages in the response body.

Technical Requirements
- Use Spring Boot/MVC and Maven
- Use Hibernate/JPA for persistence
- Store data in an in-memory H2 database
- Apply Bean Validation annotations (@NotBlank, @Size, @Min)
- Configure proper error handling (e.g., return 404 if book not found)

Coding Assignment: Book Management API
- Organize code with layers: Controller, Service, Repository, Model

Spring security:

Extend the book app:

Add authentication via in-memory users (e.g. user/password, admin/password)

Secure endpoints:

/books/** only accessible for authenticated users

/books/delete only for admin role


SqlQuery_jpa:
Create a User and Order entity with a one-to-many relation.
Write custom queries to:

Get all users with more than 3 orders

Find the total order amount per user

Return users who have not placed any orders.